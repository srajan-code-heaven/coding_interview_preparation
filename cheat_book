unordered_set<int> s;
s.find(temp)!=s.end()
s.insert(arr[i]);


unordered_map<int,int> m;
m[A[i]]++;
for(auto i:m)
i.second > arr_size/2
maj=i.first;


swap(a,b);


vector<string> arr;
arr.push_back("54");
sort(arr.begin(),arr.end(),mycompare);
string YX=Y.append(X);
if(stoi(XY)>stoi(YX))    (string to integer)


to_string  (integer to String)




	map<int, int> mp;
  mp.find(rem) != mp.end()

  	res.insert(index, "(");   {Result is a String}




    str.charAt(i) - '0'   {Character to it's ASCII integer value conversion}



	C = C * (line - i) / i;  {Pascal's Triangle}

  str.length()  - to get length of the string

  temp.find(str2) != string::npos


  str2.substr(len-2, 2)  startpoint , length

  str2.substr(2)    startpoint, end



  queue<int> ans;
  int s=q.size();
  ans.push(q.front());
  q.pop();


  stack<int> s;
  s.empty()
  int x=s.top();
  s.pop();
  s.push(x);





  void push(Node **head_ref,int data)
  {
      Node* node=new Node;
      node->data=data;
      node->next=*head_ref;
      *head_ref=node;
  }
  push(&head, 20);





    head=push(head, 9);
    Node* push(Node *head,int data)
    {
        Node* new_node=new Node;
        new_node->data=data;
        new_node->next=head;
        head=new_node;
        return head;
    }





    Node* newNode(int key)
    {
        Node* temp = new Node;
        temp->key = key;
        temp->next = NULL;
        return temp;
    }


    Node* head = newNode(50);
    head->next = newNode(20);




    list<int> *l;
		  l=new list<int>[V];
			  l[a].push_back(b);

				
